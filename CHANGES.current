Below are the changes for the current release.
See the CHANGES file for changes in older releases.
See the RELEASENOTES file for a summary of changes in each release.
Issue # numbers mentioned below can be found on Github. For more details, add
the issue number to the end of the URL: https://github.com/swig/swig/issues/

Version 4.3.0 (in progress)
===========================

2024-02-29: erezgeva
            #2609 Fix Java typemap '(const char *STRING, size_t LENGTH)'
             to use string type.
            Add (const char *STRING, size_t LENGTH) typemap to most languages.
            All languages uses string type with the
             '(const char *STRING, size_t LENGTH)' typemap.
            Add char_binary test to most languages and
             director_binary test to languages supporting director class.
            Add new typemap '(const void *BYTES, size_t LENGTH)' to
             use with C raw  data (cdata).
            Add '(const void *BYTES, size_t LENGTH)' typemap to most languages.
            Rebase 'cdata.i' files to improve coherent among different languages.
            Add li_cdata test to most languages.
            Languages with static type use byte array for
             '(const void *BYTES, size_t LENGTH)'.
            While dynamic type languages retain string.
            incompatibilities:
            * '(const char *STRING, size_t LENGTH)': Java uses String
              Users replace it with '(const void *BYTES, size_t LENGTH)' to use
              bytes array.
            * Raw C data: Go uses byte array and int64 for size.
              Users can use '(const char *STRING, size_t LENGTH)' to use strings.

2024-02-28: wsfulton
            Fix compilation errors in generated code when instantiating a templated
            static method within a template (non-static methods and constructors were
            always okay). For example:

              template <typename T> class X {
                template <class InputIterator>
                  static void fn(InputIterator first, InputIterator last) { ... }
              };
              class SimpleIterator { ... };

              %extend X<int> {
                %template(fn) fn<SimpleIterator>;
              }
